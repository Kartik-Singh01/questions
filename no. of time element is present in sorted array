class Solution{
public:	
    int fO(int arr[], int n, int x){
	   int i = 0;
	   int j = n-1;
	   int ans = -1;
	   while(i <= j){
	       int mid = i + (j-i)/2;
	       if(arr[mid] == x){
	           ans = mid;
	           j = mid-1;
	       }
	       else if(arr[mid] < x){
	           i = mid+1;
	       }
	       else if(arr[mid] > x){
	           j = mid-1;
	       }
	   }
	   return ans;
	}
	
	int lO(int arr[], int n, int x){
	   int i = 0;
	   int j = n-1;
	   int ans = -1;
	   while(i <= j){
	       int mid = i + (j-i)/2;
	       if(arr[mid] == x){
	           ans = mid;
	           i = mid+1;
	       }
	       else if(arr[mid] < x){
	           i = mid+1;
	       }
	       else if(arr[mid] > x){
	           j = mid-1;
	       }
	   }
	   return ans;
	}
	int count(int arr[], int n, int x) {
	  
	    int c=lO( arr,  n,  x);
	    int d=fO(arr, n, x);
	    int a = c-d + 1;
	    //cout<<lO(arr,n,x)<<endl;
	   // cout<<fO(arr,n,x)<<endl;
	    
	    return a;
	}
};
